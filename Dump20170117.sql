-- MySQL dump 10.13  Distrib 5.7.12, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: storycodedesign
-- ------------------------------------------------------
-- Server version	5.5.49-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `code`
--

DROP TABLE IF EXISTS `code`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `code` (
  `Techid` int(11) NOT NULL,
  `Subjectid` int(11) NOT NULL,
  `Topicid` int(11) NOT NULL,
  `ProjectID` int(11) NOT NULL,
  `CodeID` int(11) NOT NULL AUTO_INCREMENT,
  `Full_line_of_Code` varchar(255) DEFAULT NULL,
  `NumberofCodeParts` varchar(255) DEFAULT NULL,
  `CodeDef:Operation` varchar(5) DEFAULT NULL,
  `Def1Link` varchar(255) DEFAULT NULL,
  `Definition1` varchar(255) DEFAULT NULL,
  `Definition2` varchar(255) DEFAULT NULL,
  `CodeDef:statement` varchar(255) DEFAULT NULL,
  `Def2Link` varchar(255) DEFAULT NULL,
  `Definition3` varchar(255) DEFAULT NULL,
  `CodeDef:Condition` varchar(255) DEFAULT NULL,
  `Def3Link` varchar(255) DEFAULT NULL,
  `Definition4` varchar(255) DEFAULT NULL,
  `CodePart4` varchar(255) DEFAULT NULL,
  `Def4Link` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`CodeID`),
  KEY `Techid_index` (`Techid`),
  KEY `Subjectid_index` (`Subjectid`),
  KEY `Topicid_index` (`Topicid`),
  KEY `ProjectID_index` (`ProjectID`)
) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `code`
--

LOCK TABLES `code` WRITE;
/*!40000 ALTER TABLE `code` DISABLE KEYS */;
INSERT INTO `code` VALUES (1,1,2,31,1,'using System;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,2,'namespace ConsoleApplication ConsoleApplication{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,3,' public class Program {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,4,'public static void Main(string[] args)   {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,5,' Console.WriteLine(\"Hello World!\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,6,'int favoriteNum = 42;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,7,'Console.WriteLine(\"You can even directly print numbers such as the one below...\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,8,'Console.WriteLine(favoriteNum);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,9,'//Making use of tokens makes injection of variables into strings quite simple',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,10,'Console.WriteLine(\"The {0} cow, jumped over the {1}, {2} times!\", \"brown\", \"Moon\", 7);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,11,'//Results in \"The brown cow, jumped over the Moon, 7 times!\"',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,12,'//We can also make use of string concatenation though, if preferred',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,13,'string name = \"David\";',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,14,'Console.WriteLine(10 + \" Chickens attacked \" + name);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,2,31,15,'//Results in \"10 Chickens attacked David\"',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,16,'//Declare a variable called rings that is of the Int Type',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,17,'int rings = 5;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,18,'if (rings >= 5){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,19,'    Console.WriteLine(\"You are welcome to join the party\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,20,'else{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,21,'    Console.WriteLine(\"Go win some more rings\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,22,'int rings = 5;',NULL,'=',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,23,'if (rings >= 5){',NULL,'>=',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,24,'    Console.WriteLine(\"You are welcome to join the party\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,25,'else if (rings > 2){',NULL,'>',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,26,'    Console.WriteLine(\"Decent...but {0} rings aren\'t enough\", rings);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,27,'else{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,28,'    Console.WriteLine(\"Go win some more rings\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,29,'int rings = 5;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,30,'//By placing the keyword const in front of a variable declaration',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,31,'//you establish it as constant and immutable',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,32,'const name = \"Kobe\";',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,33,'if (rings >= 5 && name == \"Kobe\"){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,32,34,'  Console.WriteLine(\"Welcome to the party {0}, congratulations on your {1} rings\", name, rings);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,35,'int rings = 5;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,36,'int numOfAllStarAppearances = 17;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,37,'if (rings >= 5 || numOfAllStarAppearances > 3)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,38,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,39,'  Console.WriteLine(\"Welcome you are truly a legend\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,40,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,41,'Or we can just let in everyone who is not crazy.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,42,'7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,43,'bool crazy = true;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,44,'if (!crazy)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,45,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,46,'    Console.WriteLine(\"Let\'s party!\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,3,33,47,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,48,'// loop from 1 to 5 including 5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,49,'for (int i = 1; i <= 5; i++){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,50,'    Console.WriteLine(i);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,51,'// loop from 1 to 5 excluding 5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,52,'for (int i = 1; i < 5; i++){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,53,'    Console.WriteLine(i);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,54,'int start = 0;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,55,'int end = 5;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,56,'// loop from start to end including end',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,57,'for (int i = start; i <= end; i++){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,58,'    Console.WriteLine(i);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,59,'// loop from start to end excluding end',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,60,'for (int i = start; i < end; i++){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,61,'    Console.WriteLine(i);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,62,'//The execution section does not always have to use ++',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,63,'for (int i = 1; i < 6; i = i + 1){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,34,64,'    Console.WriteLine(i);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,35,65,'... as a while loop.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,35,66,'int i = 1;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,35,67,'while (i < 6){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,35,68,'    Console.WriteLine(i);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,4,35,69,'    i = i + 1;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,5,36,70,'answersheets/CS 361 - C',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,6,37,71,'//Declaring an empty array of size 5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,6,37,72,'int[] numArray = new int[5];',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,6,37,73,'//Declaring an array with pre-populated values;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,6,37,74,'//Arrays initialized this way take the size of the given data',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,6,37,75,'int[] numArray2 = {1,2,3,4,6};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,76,'int[] array3;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,77,'array3 = new int[] {1,3,5,7,9};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,78,'int[] arrayOfInts = {1, 2, 3, 4, 5};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,79,'// The first number lives at index 0.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,80,'Console.WriteLine(arrayOfInts[0]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,81,'// The second number lives at index 1.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,82,'Console.WriteLine(arrayOfInts[1]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,83,'// The third number lives at index 2.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,84,'Console.WriteLine(arrayOfInts[2]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,85,'// The fourth number lives at index 3.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,86,'Console.WriteLine(arrayOfInts[3]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,87,'// The fifth number lives at index 4.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,88,'Console.WriteLine(arrayOfInts[4]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,89,'int[] arr = {1, 2, 3, 4};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,90,'Console.WriteLine(\"The first number of the arr is \" + arr[0]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,91,'arr[0] = 8;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,37,92,'Console.WriteLine(\"The first number of the arr is now \" + arr[0]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,93,'// The array has now changed!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,94,'string[] myCars = new string[4] { \"Mitsubishi Outlander\", \"Toyota Camry\", \"Dodge Challenger\", \"Nissan 300zx\"};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,95,'//We can use the Array\'s property of Length to help determine where to end our loop',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,96,'//Length in this case denotes the size we specified',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,97,'for (int idx = 0; idx < myCars.Length; idx++){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,98,' Console.WriteLine(\"I own a {0}\", myCars[idx]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,99,'string[] myCars = new string[4] { \"Mitsubishi Outlander\", \"Toyota Camry\", \"Dodge Challenger\", \"Nissan 300zx\"};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,100,'foreach (string car in myCars)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,101,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,102,' //We no longer need the index as the variable car is already the indexed value',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,103,' Console.WriteLine(\"I own a {0}\", car);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,38,104,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,105,'// Multidimensional array declaration',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,106,'int [,] array2D = new int[4,2];',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,107,'int[,,] array3D = new int[2,2,4] {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,108,'     {{45,1,16,17},{21,28,32,76}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,109,'     },{      {11,0,5,42},{66,99,33,1212}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,110,'//Directly accessing a multidimensional array',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,111,'Console.WriteLine(array2D[0,1]); //prints 0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,112,'Console.WriteLine(array3D[1,0,3]); //prints 42',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,113,'// Jagged array declaration',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,114,'int[][] jaggedArray = new int[3][];',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,115,'jaggedArray[0] = new int[5];',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,116,'jaggedArray[1] = new int[4];',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,117,'jaggedArray[2] = new int[2];',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,118,'int[][] jaggedArray2 = new int[][] {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,119,'    new int[] {1,3,5,7,9},',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,120,'    new int[] {0,2},',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,121,'    new int[] {11,22,33,44}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,122,'};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,123,'// Short-hand form',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,124,'int[][] jaggedArray3 = {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,125,'    new int[] {1,3,5,7,9},',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,126,'    new int[] {0,2},',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,127,'    new int[] {11,22,33,44}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,128,'};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,129,'// You can even mix jagged and multi-dimensional arrays',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,130,'int[][,] jaggedArray4 = new int[3][,]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,131,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,132,'    new int[,] { {1,3}, {5,7} },',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,133,'    new int[,] { {0,2}, {4,6}, {8,10} },',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,134,'    new int[,] { {11,22}, {99,88}, {0,9} }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,135,'};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,136,'// Working through each array in a jagged array',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,137,'foreach(int[] innerArr in jaggedArray){',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,138,'    Console.WriteLine(\"Inner array length is {0}\", innerArr.Length);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,139,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,140,'// Accessing a jagged array',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,141,'Console.WriteLine(jaggedArray3[2][3]); //prints 44',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,7,39,142,'Console.WriteLine(jaggedArray2[0][1]); //prints 3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,143,'using System.Collections.Generic;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,144,'//Initializing an empty list of Motorcycle Manufacturers',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,145,'List<string> bikes = new List<string>();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,146,'//Use the Add function in a similar fashion to push',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,147,'bikes.Add(\"Kawasaki\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,148,'bikes.Add(\"Triumph\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,149,'bikes.Add(\"BMW\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,150,'bikes.Add(\"Moto Guzzi\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,151,'bikes.Add(\"Harley Davidson\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,152,'bikes.Add(\"Suzuki\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,153,'//Accessing a generic list value is the same as you would an array',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,154,'Console.WriteLine(bikes[2]); //Prints \"BMW\"',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,40,155,'Console.WriteLine(\"We currently know of {0} motorcycle manufacturers.\", bikes.Count);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1,1,8,41,156,'//Using our array of motorcycle manufacturers from before',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,157,'//we can easily loop through the list of them with a C style for loop',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,158,'//this time however Count is the attribute for number of items.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,159,'Console.WriteLine(\"The current manufacturers we have seen are:\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,160,'for (var idx = 0; idx < bikes.Count; idx++)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,161,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,162,' Console.WriteLine(\"-\" + bikes[idx]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,163,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,164,'// Insert a new item between a specific index',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,165,'bikes.Insert(2, \"Yamaha\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,166,'//Removal from Generic List',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,167,'//Remove is a lot like Javascript array pop, but searchs for a specified value',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,168,'//In this case we are removing all manufacturers located in Japan',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,169,'bikes.Remove(\"Suzuki\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,170,'bikes.Remove(\"Yamaha\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,171,'bikes.RemoveAt(0); //RemoveAt has no return value however',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,172,'//The updated list can then be iterated through using a foreach loop',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,173,'Console.WriteLine(\"List of Non-Japanese Manufacturers:\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,174,'foreach (string manu in bikes)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,175,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,176,' Console.WriteLine(\"-\" + manu);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,8,41,177,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,178,'Dictionary<string,string> profile = new Dictionary<string,string>();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,179,'//Almost all the methods that exists with Lists are the same with Dictionaries',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,180,'profile.Add(\"Name\", \"Speros\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,181,'profile.Add(\"Language\", \"PHP\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,182,'profile.Add(\"Location\", \"Greece\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,183,'Console.WriteLine(\"Instructor Profile\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,184,'Console.WriteLine(\"Name - \" + profile[\"Name\"]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,185,'Console.WriteLine(\"From - \" + profile[\"Location\"]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,186,'Console.WriteLine(\"Favorite Language - \" + profile[\"Language\"]);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,187,'foreach (KeyValuePair<string,string> entry in profile)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,188,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,189,' Console.WriteLine(entry.Key + \" - \" + entry.Value);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,190,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,191,'//The var keyword takes the place of a type in type-inference',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,192,'foreach (var entry in profile)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,193,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,194,' Console.WriteLine(entry.Key + \" - \" + entry.Value);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,9,42,195,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,44,196,'public static void SayHello()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,44,197,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,44,198,'    Console.WriteLine(\"Hello how are you doing today?\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,44,199,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,200,'using System;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,201,'using System.Collections.Generic;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,202,'namespace ConsoleApplication',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,203,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,204,'    public class Program',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,205,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,206,'  public static void SayHello()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,207,'  {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,208,'         Console.WriteLine(\"Hello how are you doing today?\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,209,'  }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,210,'public static void Main(string[] args)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,211,'  {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,212,'       SayHello();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,213,' }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,214,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,45,215,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,46,216,'public static void SayHello(string name)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,46,217,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,46,218,'    Console.WriteLine(\"Hello, {0}, how are you doing today?\", name);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,46,219,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,46,220,'We can invoke this function by calling its name and passing in the correct number of arguments.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,46,221,'SayHello(\"Andrew\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,222,'public static void SayHello(string name = \"buddy\")',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,223,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,224,'    Console.WriteLine(\"Hey \" + name);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,225,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,226,'// We can call it without providing any arguments and the default value will be used...',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,227,'SayHello();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,228,'// ...or we can call it with an argument and that argument\'s value will be used',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,47,229,'SayHello(\"Yoda\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,230,'public static string SayHello(string name = \"buddy\")',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,231,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,232,'    return \"Hey \" + name;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,233,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,234,'string greeting;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,235,'greeting = SayHello();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,12,48,236,'Console.WriteLine(greeting);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,237,'public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,238,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,239,'    int numPassengers = 2;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,240,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,241,'using System;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,242,'namespace ConsoleApplication',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,243,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,244,'    public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,245,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,246,'         public int numPassengers;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,247,'//Notice the Constructor function doesn\'t need',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,248,'         //a return type or the static keyword',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,249,'         public Vehicle(int val)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,250,'         {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,251,'              numPassengers = val;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,252,'         }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,253,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,254,'public class Program',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,255,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,256,'        public static void Main(string[] args)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,257,'        {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,258,'            //Adding a value to the creation passes it to the constructor',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,259,'            Vehicle myVehicle = new Vehicle(7);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,260,'Console.WriteLine($\"My vehicle can hold {myVehicle.numPassengers} people\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,261,'        }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,262,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,51,263,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,264,'public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,265,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,266,'     public int numPassengers;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,267,'     public double distance = 0.0;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,268,'public Vehicle(int val)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,269,'     {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,270,'          numPassengers = val;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,271,'     }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,272,'public void Move(double miles)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,273,'     {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,274,'        distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,275,'     }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,276,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,277,'public class Program',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,278,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,279,'    public static void Main(string[] args)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,280,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,281,'        //We create two separate objects of class-Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,282,'        Vehicle car = new Vehicle(5);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,283,'        Vehicle bike = new Vehicle(1);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,284,'//Notice they both have the same starting distance travelled',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,285,'        Console.WriteLine(car.distance); //Prints 0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,286,'        Console.WriteLine(bike.distance); //Also Prints 0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,287,'//The Move method however only effects the distance of the object it is referencing!!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,288,'        car.Move(70.8);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,289,'        Console.WriteLine(car.distance); //Now is printing 70.8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,290,'        Console.WriteLine(bike.distance); //Still prints 0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,291,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,292,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,293,'public int Move(double miles)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,294,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,295,'    distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,296,'    return (int)distance;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,52,297,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,298,'public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,299,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,300,'    public int numPassengers;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,301,'    public double distance = 0.0;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,302,'//Constructors can be overloaded ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,303,'    //The first maybe being for a new vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,304,'    public Vehicle(int val)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,305,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,306,'        numPassengers = val;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,307,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,308,'//The second for preowned with milage already',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,309,'    public Vehicle(int val, double odo)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,310,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,311,'        numPassengers = val;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,312,'        distance = odo;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,313,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,314,'//Method can also be overloaded for handling different parameters',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,315,'    public int Move(double miles)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,316,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,317,'        distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,318,'        return (int)distance;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,319,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,320,'//If a boolean is included in this version of the method call',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,321,'    //it may be measuring in km rather than miles.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,322,'    public int Move(double miles, bool km)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,323,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,324,'        //Convert the KM measurement to miles',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,325,'        if (km == true)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,326,'        {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,327,'            miles = miles * 0.62;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,328,'        }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,329,'        distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,330,'        return (int)distance;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,331,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,332,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,333,'public int Move(double miles)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,334,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,335,'    distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,336,'    return (int)distance;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,337,'} ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,338,'public int Move(double miles, bool km)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,339,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,340,'    // Convert the KM measurement to miles',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,341,'    if (km == true)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,342,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,343,'        miles = miles * 0.62;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,344,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,345,'    return Move(miles);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,53,346,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,54,347,'private _numPassengers = 5;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,54,348,'public int numPassengers {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,54,349,' get { return _numPassengers }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,54,350,' set { _numPassengers = value; }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,54,351,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,15,54,352,'public int numPassenger { get; set; }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,353,'public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,354,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,355,'    public int numPassengers;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,356,'    public double distance = 0.0;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,357,'//Constructors can be overloaded ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,358,'    //The first maybe being for a new vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,359,'    public Vehicle(int val)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,360,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,361,'        numPassengers = val;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,362,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,363,'//The second for preowned with milage already',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,364,'    public Vehicle(int val, double odo)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,365,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,366,'        numPassengers = val;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,367,'        distance = odo;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,368,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,369,'//Method can also be overloaded for handling different parameters',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,370,'    public int Move(double miles)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,371,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,372,'        distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,373,'        return (int)distance;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,374,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,375,'//If a boolean is included in this version of the method call',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,376,'    //it may be measuring in km rather than miles.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,377,'    public int Move(double miles, bool km)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,378,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,379,'        //Convert the KM measurement to miles',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,380,'        if (km == true)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,381,'        {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,382,'            miles = miles * 0.62;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,383,'        }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,384,'        distance += miles;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,385,'        return (int)distance;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,386,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,387,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,388,'public class Car : Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,389,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,390,'    public int numberOfWheels = 4;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,391,'    public string condition;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,392,'public Car() : base(5)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,393,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,394,'        condition = \"New\";',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,395,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,396,'public Car(double odo) : base(5, odo)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,397,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,398,'        condition = \"Used\";',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,399,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,400,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,401,'public class Program',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,402,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,403,'    public static void Main(string[] args)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,404,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,405,'        Car oldCar = new Car(167263);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,406,'        Console.WriteLine($\"Car Condition: {oldCar.condition}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,407,'        Console.WriteLine($\"Max occupancy: {oldCar.numPassengers}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,408,'        oldCar.Move(6);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,409,'        Console.WriteLine($\"Current Milage: {oldCar.distance} miles\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,410,'Car myCar = new Car();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,411,'        //Remember there are different forms of string construction',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,412,'        //but they all accomplish the same goal so it is simply preference',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,413,'        Console.WriteLine($\"Car Condition: {myCar.condition}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,414,'        Console.WriteLine(\"Max occupancy: {0}\", myCar.numPassengers);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,415,'        myCar.Move(26.6);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,416,'        Console.WriteLine(\"Current Milage: \" + myCar.distance + \" miles\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,417,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,58,418,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,419,'public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,420,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,421,'    //All past code for the Car Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,422,'    //should still be present',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,423,'    public void GetInfo()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,424,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,425,'        Console.WriteLine(\"This is just a basic Vehicle!\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,426,'        Console.WriteLine($\"Currently has travelled {distance} miles\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,427,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,428,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,429,'public class Car : Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,430,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,431,'    //All past code for the Car Class',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,432,'    //should still be present',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,433,'    public new void GetInfo()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,434,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,435,'        Console.WriteLine($\"Car Condition:{condition}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,436,'        Console.WriteLine($\"Max occupancy: {numPassengers}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,437,'        Console.WriteLine($\"Current Milage: {distance} miles\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,438,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,439,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,440,'public class Program',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,441,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,442,'    public static void Main(string[] args)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,443,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,444,'        Vehicle obj1 = new Vehicle(5);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,445,'        Car obj2 = new Car(5);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,446,'        obj1.GetInfo();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,447,'        obj2.GetInfo();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,448,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,59,449,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,450,'public class Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,451,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,452,'    //All past code for the Car Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,453,'    //should still be present',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,454,'    public void GetInfo()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,455,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,456,'        Console.WriteLine($\"Max occupancy: {numPassengers}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,457,'        Console.WriteLine($\"Current Milage: {distance} miles\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,458,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,459,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,460,'public class Car : Vehicle',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,461,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,462,'    //All past code for the Car Class',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,463,'    //should still be present',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,464,'    public new void GetInfo()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,465,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,466,'        //This line will call the parent\'s version of this method',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,467,'        //first then add any additional code to it!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,468,'        base.GetInfo();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,469,'        Console.WriteLine($\"Car Condition:{condition}\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,470,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,471,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,472,'public class Program',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,473,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,474,'    public static void Main(string[] args)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,475,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,476,'        Vehicle obj1 = new Vehicle(5);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,477,'        Car obj2 = new Car(5);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,478,'        obj1.GetInfo();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,479,'        obj2.GetInfo();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,480,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,16,60,481,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,482,'interface CanRun',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,483,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,484,'    // Anything that implements the CanRun interface must ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,485,'    // implement a \'Run()\' method that returns an integer.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,486,'    int Run();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,487,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,488,'// Therefore, this class must have a Run() function in it!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,489,'class Goat : CanRun',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,490,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,491,'    public int Run()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,492,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,493,'       Console.WriteLine(\"I\'m a goat, and you betcha I can run....\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,494,'       return 5;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,495,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,496,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,497,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,498,'// You can have inheritance as well as interfaces at the same time! ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,499,'class Bird',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,500,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,501,'    // Most birds don\'t run!!!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,502,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,503,'// An ostrich, however, is an bird AND it runs!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,504,'// Note: always specify inheritance first, followed by interfaces (there may be multiple)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,505,'class Ostrich: Bird, CanRun',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,506,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,507,'    public int Run()',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,508,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,509,'        Console.WriteLine(\"I\'m a running bird...crazy, right?\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,510,'        return -16;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,511,'        // Why does an Ostrich return -16 for this function?',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,512,'        // Scientists Have been working on this very problem for years.  Let\'s move on. ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,513,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,514,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,515,'// Both can now be treated as objects of type CanRun',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,516,'CanRun obj1 = new Ostrich();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,64,517,'CanRun obj2 = new Goat();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,518,'// Assume this is the class provided that we can not edit.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,519,'public class ShoppingCart',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,520,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,521,'    public List<Product> Products { get; set; }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,522,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,523,'// This is the wrapper for our extension',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,524,'// Note the static keyword',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,525,'public static class MyExtensionMethods',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,526,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,527,'    // Note how the parameters for the new function is previous class',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,528,'    public static decimal TotalPrices(this ShoppingCart cartParam)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,529,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,530,'         decimal total = 0;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,531,'         foreach (Product prod in cartParam.Products)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,532,'         {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,533,'             total += prod.Price;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,534,'         }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,535,'         return total;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,536,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,65,537,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,538,'public static class MyExtensionMethods',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,539,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,540,'    // This still only effects the Shopping cart class',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,541,'    public static decimal TotalPrices(this ShoppingCart cartParam)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,542,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,543,'         decimal total = 0;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,544,'         foreach (Product prod in cartParam.Products)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,545,'         {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,546,'             total += prod.Price;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,547,'         }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,548,'         return total;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,549,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,550,'// This method is added to everything that uses the CanRun interface though!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,551,'    public static double MarathonDistance(this CanRun creature)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,552,'    {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,553,'        creature.Run();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,554,'        Console.WriteLine(\"I\'m running a marathon now!\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,555,'        return 26.2;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,556,'    }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,66,557,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,558,'public delegate void Del(string message);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,559,'public static void DelegateMethod(string message)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,560,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,561,'    Console.WriteLine(message);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,562,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,563,'// Instantiate the delegate to reference the DelegateMethod function',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,564,'Del handler = DelegateMethod;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,565,'public void MethodWithCallback(int param1, int param2, Del callback)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,566,'{',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,567,'    callback(\"The number is: \" + (param1 + param2).ToString());',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,568,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,569,'// Call this function by passing the params and actual delegate reference',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,67,570,'MethodWithCallback(1, 2, handler);',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,69,571,'Product[] products = {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,69,572,'     new Product { Name = \"Jeans\", Category = \"Clothing\", Price = 24.7 },',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,69,573,'     new Product { Name = \"Socks\", Category = \"Clothing\", Price = 8.12 },',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,69,574,'     new Product { Name = \"Scooter\", Category = \"Vehicle\", Price = 99.99 },',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,69,575,'     new Product { Name = \"Skateboard\", Category = \"Vehicle\", Price = 24.99 },',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,22,69,576,'};',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,577,'//At the top of the code',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,578,'using System;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,579,'using System.Collections.Generic;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,580,'using System.Linq;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,581,'//*****',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,582,'//Rest of program code',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,583,'//*****',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,584,'var foundProducts = from match in products',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,585,'                    orderby match.Price descending',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,586,'                    select new { match.Name, match.Price };',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,70,587,'var foundProducts = products.OrderByDescending(e => e.Price).Select(e => new { e.Name, e.Price });',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,588,'//Here is an example of an asynchronous call to a webserver',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,589,'//that returns the length of the page content after the call comes back.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,590,'using System.Net.Http;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,591,'using System.Threading.Tasks;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,592,'public class MyAsyncMethods {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,593,'public async static Task<long?> GetPageLength() {',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,594,'HttpClient client = new HttpClient();',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,595,'         var httpMessage = await client.GetAsync(\"http://apress.com\");',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,596,'//We can do things here while waiting',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,597,'         //for the HTTP request to complete',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,598,'return httpMessage.Content.Headers.ContentLength;',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,599,'     }',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(0,0,24,71,600,'}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `code` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `projects`
--

DROP TABLE IF EXISTS `projects`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `projects` (
  `Projectid` int(11) NOT NULL,
  `ProjectName` varchar(45) DEFAULT NULL,
  `Topicid` int(11) NOT NULL,
  `Subjectid` int(11) NOT NULL,
  `ProjectDesc` text,
  `Techid` int(11) NOT NULL,
  PRIMARY KEY (`Projectid`),
  KEY `Topicid_index` (`Topicid`),
  KEY `Subjectid_index` (`Subjectid`),
  KEY `Techid_index` (`Techid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `projects`
--

LOCK TABLES `projects` WRITE;
/*!40000 ALTER TABLE `projects` DISABLE KEYS */;
INSERT INTO `projects` VALUES (31,'Varexample',2,1,'Variables\nAs mentioned in the previous tab, C# deals with variables slightly different than languages such as Javascript or Python due to it using Static typing. This basically means that all variables declared in C# must have a value type associated with them prior to the code being executed.\nIn JavaScript, we can create different variables without ever specifying a type because the runtime interpreter will do this for us.\nvar name = \"Tim\";\nvar age = 30;\nvar height = 1.905;\nvar blueEyed = false;\nIn C# though, we must make sure that the compiler is able to determine the type of each variable while building the project.\nstring name = \"Todd\";\nint age = 32;\ndouble height = 1.875;\nbool blueEyed = true;\nWith C# if we forget to specify a variable type the compiler will quickly throw us an error. Similarly, if you attempt to assign a value to a variable that does not conform to it\'s specified type the compiler will come back with a type-mismatch error.\nType Conversion\nWhat if you want to store a variable that was initially created as a Double type as an Int type? It is possible for any type that is able to conform to the new type it\'s trying to be stored as to be converted by using a process known as Typecasting. Typecasting will build out a NEW memory space with the desired type and then attempt to convert the previous value to this new specified type.\ndouble floatNum = 7.76;\nint num = floatNum;\n//This will cause a compiler type-mismatch error!!\ndouble floatNum = 7.76;\nint num = (int)floatNum;\n//Floating point to integer conversion truncates all numbers after the decimal\n//As such num now evaluated to 7\nWhy is C# Strongly Typed?\nPerformance\nMany other languages like Ruby and Javascript which dynamically typed languages don\'t need to specifically declare the type and can change what is stored in a variable back and forth between different types. Although loosely typed languages may be easier for the developer (since the developer doesn\'t need to worry about types), it reduces performance because now the computer has to worry about remembering types and how to store different values of different types. In addition, the computer now has to allocate extra space for each variable and it has to store them in such a way that the variable can hold any type of information. C# is strongly typed so it forces the developer to be more conscious about types and it also allows the computer to run more efficiently by allocating just enough space for each variable.\n1 \nWriting to the Console\nAfter following the earlier steps setting up a default C# app, we end up with some code in our Program.cs that looks something like this...\nusing System;\nnamespace ConsoleApplication\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\nInside the Main function, we see the function of Console.WriteLine() This is a function provided to us from the System library that will be our main means of console string output. This function is able to display any string or value that has a valid toString method such as integers with no explicit type conversion needed.\n2 \nint favoriteNum = 42;\nConsole.WriteLine(\"You can even directly print numbers such as the one below...\");\nConsole.WriteLine(favoriteNum);\nFor mixing strings and other variables this can be accomplished by placing tokens inside your output string and supplying the WriteLine function with additional parameters or by making use of string concatenation.\n//Making use of tokens makes injection of variables into strings quite simple\nConsole.WriteLine(\"The {0} cow, jumped over the {1}, {2} times!\", \"brown\", \"Moon\", 7);\n//Results in \"The brown cow, jumped over the Moon, 7 times!\"\n//We can also make use of string concatenation though, if preferred\nstring name = \"David\";\nConsole.WriteLine(10 + \" Chickens attacked \" + name);\n//Results in \"10 Chickens attacked David\"\nYou can even perform operations directly on a string by making use of string interpolation.\nstring interpol = $\"The answer to 2 + 7 is {2+7}\";\nConsole.WriteLine(interpol);\n//Outputs \"The answer to 2 + 7 is 9\"\n',1),(32,'Conditionalsexample',3,1,'C# Conditionals\nWe use conditionals to execute code based on a specific logical condition. For example, let\'s say we are having a party for NBA Legends. We only want to allow players with at least 5 rings. We could write the logic something like this:\n3\n//Declare a variable called rings that is of the Int Type\nint rings = 5;\nif (rings >= 5)\n{\n    Console.WriteLine(\"You are welcome to join the party\");\n}\nelse\n{\n    Console.WriteLine(\"Go win some more rings\");\n}\nIf we have more than one condition we can add an else if statement:\n4\nint rings = 5;\nif (rings >= 5)\n{\n    Console.WriteLine(\"You are welcome to join the party\");\n}\nelse if (rings > 2)\n{\n    Console.WriteLine(\"Decent...but {0} rings aren\'t enough\", rings);\n}\nelse\n{\n    Console.WriteLine(\"Go win some more rings\");\n}\nWe used two comparison operators here. First, we checked if rings were greater than equal to 5. We also checked if rings were greater than 2. Here is a list of C#\'s comparison operators:\nComparison Operators\n\nEquality vs. Identity\nThere is a difference between equality and identity. For example == checks whether the instances on the left and the right are equal. Two instances can be equal, but they don\'t need to have the same location in memory. You can check if two instances are one in the same and share the same memory location by using identity operators. The identity operator in C# is actually a method rather than a keyword and can be performed by invoking A.Equals(B) with A and B being the respective variables.',1),(33,'Conditional Logical Operators',3,1,'Logical Operators\n\nWe can use Logical Operators in our Conditionals as well. Let\'s say we want to change the criteria for entering our NBA Legends party. Let\'s say you have to have at least 5 rings AND have the name Kobe to enter the party:\n5\nint rings = 5;\n//By placing the keyword const in front of a variable declaration\n//you establish it as constant and immutable\nconst name = \"Kobe\";\nif (rings >= 5 && name == \"Kobe\")\n{\n  Console.WriteLine(\"Welcome to the party {0}, congratulations on your {1} rings\", name, rings);\n}\nWe can change our criteria and say that you have to have at least 5 rings or have at least 3 All-Star appearances.\n6\nint rings = 5;\nint numOfAllStarAppearances = 17;\nif (rings >= 5 || numOfAllStarAppearances > 3)\n{\n  Console.WriteLine(\"Welcome you are truly a legend\");\n}\nOr we can just let in everyone who is not crazy.\n7\nbool crazy = true;\nif (!crazy)\n{\n    Console.WriteLine(\"Let\'s party!\");\n}\n',1),(34,'For Loops',4,1,'For Loops\nA for loop performs a set of code in a specific range, sequence, or collection. For now, we will focus on using the \"C styled\" for loop with a range. Go ahead and run the following code below, in a new project, and see what the output is in the Console when you run.\n\n\n// loop from 1 to 5 including 5\nfor (int i = 1; i <= 5; i++)\n{\n    Console.WriteLine(i);\n}\n// loop from 1 to 5 excluding 5\nfor (int i = 1; i < 5; i++)\n{\n    Console.WriteLine(i);\n}\nYou can just as easily use variables to create a range as well!\n33\nint start = 0;\nint end = 5;\n// loop from start to end including end\nfor (int i = start; i <= end; i++)\n{\n    Console.WriteLine(i);\n}\n// loop from start to end excluding end\nfor (int i = start; i < end; i++)\n{\n    Console.WriteLine(i);\n}\nThe C-style for loops are built with the separate initialization, condition, and increment(execution) clauses all separated by semicolons. As for what each section is used for, the initialization is only run once when the loop is first reached to establish a starting point. The condition is checked at the beginning of every loop cycle and if it ever evaluates to be false it will stop the loop. The increment or execution clause runs at the end of each cycle of the loop and is mostly used to move the variable built-in initialization along toward the conditional.\n',1),(35,'While Loops',4,1,'35 While Loops\nA while loop is used to loop for an unknown number of times. Unlike a For loop where you first specify a variable and how to change it, in a while loop, we simply specify a condition. Anything that we write with a for loop can be written with a while loop. Let\'s see how we can convert our for-in loops to while loops.\nWe can re-write this for-in loop…\n\n//The execution section does not always have to use ++\nfor (int i = 1; i < 6; i = i + 1)\n{\n    Console.WriteLine(i);\n}\n... as a while loop.\n\nint i = 1;\nwhile (i < 6)\n{\n    Console.WriteLine(i);\n    i = i + 1;\n}\nNote that the while loop syntax requires us to create our own bounds. In later assignments, you may find situations where you don\'t know how many times you will need to repeat before entering the loop in these situations it is important to know how to use a while loop.\n',1),(36,'Project 1 Fundamentals I',5,1,'Fundamentals I\nMandatoryDeadline: Monday of Week 1Difficulty Level: BasicEstimated Time: 1 hr\nIt\'s important that you get familiar with using C# variables as well as if/else statements and loops. After all, understanding how to use these components make up the majority of what builds your apps. The basic assignments are to help you master some of these basic concepts.\n\nPlease create a new .NET project and finish these exercises before uploading.\n\n*Be sure for this course to zip and upload the entire project folder together*\n Create a Loop that prints all values from 1-255\n Create a new loop that prints all values from 1-100 that are divisible by 3 or 5, but not both\n Modify the previous loop to print Fizz for multiples of 3, Buzz for multiples of 5, and FizzBuzz for both\n (Optional) If you used modulus in the last step, try doing the same without using it. Vice-versa for those who didn\'t!',1),(37,'Array',7,1,'32 Arrays\nWith all programming languages, we often need to combine related values into a collection under a single variable name. With C#, there are quite a few ways we can do this, but the first one we will go over is the Array. Arrays in C# are similar to other languages we have worked with, such as Javascript or Python, in that they are a numerically indexed collection of values. However, unlike these other languages, Arrays in C# must have an exact size they are initialized with that can not be changed or mutated.\n//Declaring an empty array of size 5\nint[] numArray = new int[5];\n//Declaring an array with pre-populated values;\n//Arrays initialized this way take the size of the given data\nint[] numArray2 = {1,2,3,4,6};\nThe [] brackets denote the Array type and preceding the brackets we place the type of values that we\'ll be storing. Also take notice that just like all variables we have created up to this point an array in C# must also have an associated type that, similar to its size, is immutable. Anything that is placed inside of the array during or after declaration must conform to this value type. It is possible to declare an array without initialization, but you must use the \"new\" operator once you do go to add values.\nint[] array3;\narray3 = new int[] {1,3,5,7,9};\nAccessing Arrays\nArrays are zero indexed. What this means is the first instance inside of an  Array lives at index 0. The second instance inside of an Array lives at index 1. \nint[] arrayOfInts = {1, 2, 3, 4, 5};\n// The first number lives at index 0.\nConsole.WriteLine(arrayOfInts[0]);\n// The second number lives at index 1.\nConsole.WriteLine(arrayOfInts[1]);\n// The third number lives at index 2.\nConsole.WriteLine(arrayOfInts[2]);\n// The fourth number lives at index 3.\nConsole.WriteLine(arrayOfInts[3]);\n// The fifth number lives at index 4.\nConsole.WriteLine(arrayOfInts[4]);\nAfter we access an Array using its index, we can set the value at that particular index as well.\nint[] arr = {1, 2, 3, 4};\nConsole.WriteLine(\"The first number of the arr is \" + arr[0]); \narr[0] = 8;\nConsole.WriteLine(\"The first number of the arr is now \" + arr[0]);\n// The array has now changed!\n',1),(38,'Iterating through an arrayexample16',7,1,'33 Iterating through an array\nIt is quite tedious moving through an array by writing each and every index out; just imagine if we had 1000+ values in our array!! Luckily we can use the knowledge we gained in the last chapter to loop through each index of the array. This process of looping through all given indexes of an array is what is typically called iterating.\nstring[] myCars = new string[4] { \"Mitsubishi Outlander\", \"Toyota Camry\", \"Dodge Challenger\", \"Nissan 300zx\"};\n//We can use the Array\'s property of Length to help determine where to end our loop\n//Length in this case denotes the size we specified\nfor (int idx = 0; idx < myCars.Length; idx++)\n{\n Console.WriteLine(\"I own a {0}\", myCars[idx]);\n}\nThis is nice, but because this happens to be such a common occurrence C# provides us with another type of loop called a foreach loop specialized for just this type of operation. A foreach loop just needs a variable that holds each indexed value of the array temporarily and will loop through all of them from there.\nstring[] myCars = new string[4] { \"Mitsubishi Outlander\", \"Toyota Camry\", \"Dodge Challenger\", \"Nissan 300zx\"};\nforeach (string car in myCars)\n{\n //We no longer need the index as the variable car is already the indexed value\n Console.WriteLine(\"I own a {0}\", car);\n}\n',1),(39,'MultidimensionalArraysexample17',7,1,'Multidimensional Arrays\nIn certain instances, you may find the need to hold an array inside another array you have initialized. In this case, you must create the original array with this in mind and specify not only the number of inner arrays but also the size of each of these inner arrays. This is called a multidimensional array because it builds out a grid of sorts based on the various indexes. Keep in mind, although Multidimensional arrays are important to know, they do not show up in code very often!\n// Multidimensional array declaration\nint [,] array2D = new int[4,2];\nint[,,] array3D = new int[2,2,4] {\n     {\n      {45,1,16,17},{21,28,32,76}\n     },{\n      {11,0,5,42},{66,99,33,1212}\n     }\n    };\n//Directly accessing a multidimensional array\nConsole.WriteLine(array2D[0,1]); //prints 0\nConsole.WriteLine(array3D[1,0,3]); //prints 42\nMultidimensional arrays solve one problem but go on to create another in the process. The problem that occurs is that multidimensional arrays created in the manner must be perfectly rectangular with all inner arrays being the same size. So what if we need to vary the lengths of inner arrays? This leads to a third way of creating arrays called a jagged array. Though initialized and accessed differently, jagged arrays set out to accomplish the same task of holding arrays within array except without the need for uniform inner array sizes.\n// Jagged array declaration\nint[][] jaggedArray = new int[3][];\njaggedArray[0] = new int[5];\njaggedArray[1] = new int[4]; \njaggedArray[2] = new int[2];\nint[][] jaggedArray2 = new int[][] {\n    new int[] {1,3,5,7,9},\n    new int[] {0,2},\n    new int[] {11,22,33,44}\n};\n// Short-hand form\nint[][] jaggedArray3 = {\n    new int[] {1,3,5,7,9},\n    new int[] {0,2},\n    new int[] {11,22,33,44}\n};\n// You can even mix jagged and multi-dimensional arrays\nint[][,] jaggedArray4 = new int[3][,] \n{\n    new int[,] { {1,3}, {5,7} },\n    new int[,] { {0,2}, {4,6}, {8,10} },\n    new int[,] { {11,22}, {99,88}, {0,9} } \n};\n// Working through each array in a jagged array\nforeach(int[] innerArr in jaggedArray){\n    Console.WriteLine(\"Inner array length is {0}\", innerArr.Length);\n}\n// Accessing a jagged array\nConsole.WriteLine(jaggedArray3[2][3]); //prints 44\nConsole.WriteLine(jaggedArray2[0][1]); //prints 3\n\n',1),(40,'Generic Listsexample18',8,1,'If we were looking for something more similar to what we call arrays in languages like Javascript look no further than Generic Lists, or just simply Lists. Lists are an implementation of linked lists that act very much like the dynamically sizing arrays of these other languages. Once you create a list you are able to freely add and remove things as well as access values by index independent of a declared size. This is because: list, just like arrays in Javascript, are actually just objects with indexed attributes that act as the values of an array. Lists still need a type associated with them just the same as every other variable in C#. To get started with Lists we just need to be sure to include the class of generics to our project page by adding the following line at the top:\nusing System.Collections.Generic;\nFrom there we can go about creating a very simple list to work with...\n//Initializing an empty list of Motorcycle Manufacturers\nList<string> bikes = new List<string>();\n//Use the Add function in a similar fashion to push\nbikes.Add(\"Kawasaki\");\nbikes.Add(\"Triumph\");\nbikes.Add(\"BMW\");\nbikes.Add(\"Moto Guzzi\");\nbikes.Add(\"Harley Davidson\");\nbikes.Add(\"Suzuki\");\n//Accessing a generic list value is the same as you would an array\nConsole.WriteLine(bikes[2]); //Prints \"BMW\"\nConsole.WriteLine(\"We currently know of {0} motorcycle manufacturers.\", bikes.Count);\nThis seems easy enough, but what is all this <string> stuff going on? This is what is called a generic type and it is a way for objects to be created with various different types. But wait didn\'t we say earlier that variables can\'t just change types? This is still true! Once a list is created with a type specified it can not be changed; however, thanks to generics we can use the blueprint for a List to make a list of Strings and a different list of Ints with them functioning the same outside of the types of data they can hold.\n',1),(41,'Iterating through a listexample19',8,1,'Similar to how we were able to access a list just as we had accessed an array we can also iterate through a list exactly as we had with an array. This all goes back to the nice fact that though a list is an object it is nice enough to keep attributes referenceable by index through the use of [] brackets.\n//Using our array of motorcycle manufacturers from before\n//we can easily loop through the list of them with a C style for loop\n//this time however Count is the attribute for number of items.\nConsole.WriteLine(\"The current manufacturers we have seen are:\");\nfor (var idx = 0; idx < bikes.Count; idx++)\n{\n Console.WriteLine(\"-\" + bikes[idx]);\n}\n// Insert a new item between a specific index\nbikes.Insert(2, \"Yamaha\");\n//Removal from Generic List\n//Remove is a lot like Javascript array pop, but searchs for a specified value\n//In this case we are removing all manufacturers located in Japan\nbikes.Remove(\"Suzuki\");\nbikes.Remove(\"Yamaha\");\nbikes.RemoveAt(0); //RemoveAt has no return value however\n//The updated list can then be iterated through using a foreach loop\nConsole.WriteLine(\"List of Non-Japanese Manufacturers:\");\nforeach (string manu in bikes)\n{\n Console.WriteLine(\"-\" + manu);\n}\nThere are a lot of methods predefined on the List class, but these are simply some of the most common and how to use them. For a full list of the C# Generic List method, you can check out the link here. Make sure you don\'t get lost in too much documentation as much of it will come with time and even more so will only be useful on rare occasions.\n',1),(42,'Dictionary Classexample20',9,1,'Dictionary Class\nA dictionary is the final main collection type commonly used in C#. It is implemented very similarly to Lists and also makes use of Generics for how it is instantiated. The major difference that exists between a list and a dictionary is that dictionary values are not referenced by numerical indexes, but rather key-value pairs. The type of both the key and the value stored at that key must be specified when initializing a dictionary as such: Dictionary<TKey, TValue> It also is part of the Generic library so don\'t forget to include the using statement from the previous chapter on lists.\nDictionary<string,string> profile = new Dictionary<string,string>();\n//Almost all the methods that exists with Lists are the same with Dictionaries\nprofile.Add(\"Name\", \"Speros\");\nprofile.Add(\"Language\", \"PHP\");\nprofile.Add(\"Location\", \"Greece\");\nConsole.WriteLine(\"Instructor Profile\");\nConsole.WriteLine(\"Name - \" + profile[\"Name\"]);\nConsole.WriteLine(\"From - \" + profile[\"Location\"]);\nConsole.WriteLine(\"Favorite Language - \" + profile[\"Language\"]);\nOne major difference between Lists and Dictionaries when it comes to interacting with them is iterating through their collections. The way we had been using foreach loops with Lists needs to be changed slightly to work with dictionaries since rather than just wanting to return a value, due to their nature of containing key-value pairs dictionaries when being iterated over will return both. As such the temp variable that holds the values and how we work with them must be altered slightly.\nforeach (KeyValuePair<string,string> entry in profile)\n{\n Console.WriteLine(entry.Key + \" - \" + entry.Value);\n}\nThis is ok, but that KeyValuePair<string,string> line looks a little scary. We can clean this up by using a pretty cool technique called type inference. What type inference does is allows you to not have to directly type the type for the variable, but rather will cause the variable to INFER what the type will be based on the very first value assigned to it. A few out there might be feeling \"This is awesome! Why weren\'t we taught this right away!?\"  This technique definitely saves some time and it can also greatly reduce clarity that specifying types provides. It is to be used sparingly when the type of a variable can easily be deduced.\n\"With Great Power Comes Great Responsibility\"\n//The var keyword takes the place of a type in type-inference\nforeach (var entry in profile)\n{\n Console.WriteLine(entry.Key + \" - \" + entry.Value);\n}\n\nFrom <http://learn.codingdojo.com/m/25/4015/28449> \n\n',1),(43,'(Optional) Boxing/Unboxing',11,1,'(Optional) Boxing/Unboxing\nIn C# everything needs an associated type at compile time due to it using static typing. This is pretty useful for keeping things consistent and avoiding some data type errors. But what are we to do when we need to make a collection with different types of data? We could make a jagged array, but then we would have to know the sizes of our data sets as well. We know that lists are able to handle varying lengths of data, but we are back to now being able to store only one type of data. Well luckily with a little implementation trick that exists in C# called Boxing we can construct a list of one data type, that holds data of different data type. Wait that seems quite contradictory, doesn\'t it? The way this works is that almost all types can be cast to the generic object type. So if you construct a list of type object, and cast all data passed to it as such, you will be able to hold varying types in one collection. This process of boxing is very powerful, but we have to keep in mind that when working with any data in a collection of this type we have to be sure to cast it back to its original type when accessing it which is the flip side of the coin that we call \"unboxing\".\nSafely Unboxing\n• Optional\n• Deadline: Monday of Week 1\n• Estimated Time: 1-2 hrs\nNote that though boxing and unboxing is a powerful tool it can also be dangerous. If you were to unbox something to work with and attempt to cast it to a data-type that it can not conform to the program will break at runtime even though the compiler may allow the operation at build-time. We need to be careful with unboxing values and handle any cases like this that may not go as planned. The simplest way is to make sure the value works for the type you are trying to case it to before doing so. This can be done by leveraging the is keyword in a conditional statement.\n//Box some string data into a variable\nobject BoxedData = \"This is clearly a string\";\n//Make sure it is the type you need before proceeding\nif (BoxedData is int) {\n    //This shouldn\'t run\n    Console.WriteLine(\"I guess we have an integer value in this box?\");\n}\nif (BoxedData is string) {\n    Console.WriteLine(\"It is totally a string in the box!\");\n}\n •  \nCreate an empty List of type object\n •  \nAdd the following values to the list: 7, 28, -1, true,\n •  \nLoop through the list and print all values (Hint: Type Inference might help here!)\n •  \nAdd all values that are Int type together and output the sum\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28457> \n\n',1),(44,'Functionsexample21',12,1,'Functions\nA function is a name that is related to a block of code we can execute. To execute this code, we invoke it. A function is invoked when we call its name, pass along the necessary input, it will execute the block of code and usually give us back some kind of output. Some functions take no input and some functions have no output. Even though a function doesn\'t return anything, it can do something inside the block of code that alters a program. For example:\npublic static void SayHello()\n{\n    Console.WriteLine(\"Hello how are you doing today?\");\n}\nHere we defined a function with the accessibility level of public, declared as a static member, has a return type of void, declared its name to be SayHello, and specified that this function does not take in any arguments. When this function is invoked, it will print a greeting to the screen but it will not return anything.\nAccessibility Levels\nTo walk through these various parts the accessibility level controls what other parts of the program have access to invoke the function. Public specifies that the function is fully accessible from any part of the program that can see the file it is written in. If we leave out the first keyword, the function defaults to being private meaning it can only be accessed by other functions within the same scope. We will be getting more in depth into function accessibility and the other type that exists out there, but for now it is safe to assume every function we will be creating can be prefixed with the public keyword.\nStatic?\nThe next part of this is the single optional keyword of static. Static makes a function able to be called without being instantiated as part of an object. This is a key part until we start making use of OOP and treating functions a little differently. The final piece of this line is the return type. If the function is to return any value the type of this value must be specified here. In the absence of a return value though we instead put the keyword void in.',1),(45,'Invoking a Functionexample22',12,1,'Invoking a Function\nWhen we want to invoke this function in a .NET console application we need to be aware of a few things. First, the function must be placed outside of the Main function, but still inside the Program class. This is the case because without being referenced inside of the Program class, .NET does not know how to interact with this code; however, C# does not support embedding of functions so the new function we add must be separate.  Once built however the new function can be run by calling its name inside the Main function and passing in the necessary input. In this case, the function requires no input so we won\'t pass anything in. This function doesn\'t return anything, but it will have a side effect of printing something to the Terminal Console.\nusing System;\nusing System.Collections.Generic;\nnamespace ConsoleApplication\n{\n    public class Program\n    {\n  public static void SayHello()\n  {\n         Console.WriteLine(\"Hello how are you doing today?\");\n  }\npublic static void Main(string[] args)\n  {\n       SayHello();\n }\n    }\n}\n',1),(46,'Function Parametersexample23',12,1,'Function Parameters\nWe define what kind of input we want by declaring parameters. Let\'s declare a parameter named \'name\' that will be of the String Type. Our function will still not return anything but its side effect will be a little bit more personalized. Note that we need to not only declare a parameter name but also give the parameter a specific type.\npublic static void SayHello(string name)\n{\n    Console.WriteLine(\"Hello, {0}, how are you doing today?\", name);\n}\nWe can invoke this function by calling its name and passing in the correct number of arguments.\nSayHello(\"Andrew\");\nWait, what\'s the difference between a parameter and an argument? These two words get mixed up a lot in programming. In this example, \'name\' is a parameter while \"Andrew\" is an argument. We define parameters. We pass in arguments into functions.',1),(47,'Default Parameter Valuesexample24',12,1,'Default Parameter Values\nIt\'s good to have default parameter values sometimes. Let\'s revisit our SayHello function. If we don\'t know the name of the person that we are greeting we can have a default value to go with. For example, we can just say \"Hey, buddy.\"\npublic static void SayHello(string name = \"buddy\")\n{\n    Console.WriteLine(\"Hey \" + name);\n}\n// We can call it without providing any arguments and the default value will be used...\nSayHello();\n// ...or we can call it with an argument and that argument\'s value will be used\nSayHello(\"Yoda\");\n',1),(48,'Returnexample25',12,1,'Return\nSo far none of our functions had any tangible output. In many cases, we would want our function to return some sort of value that we can use later in our program. Let\'s modify our sayHello function and observe the differences:\npublic static string SayHello(string name = \"buddy\")\n{\n    return \"Hey \" + name;\n}\nstring greeting;\ngreeting = SayHello();\nConsole.WriteLine(greeting);\n',1),(49,'Assignment: Basic 13',13,0,'Assignment: Basic 13\n• Mandatory\n• Deadline: Monday of Week 1\n• Difficulty Level: Basic\n• Estimated Time: .5-2 hrs\nSolve all 13 problems below in as much of C# as possible.\nPrint 1-255\nWrite a program (sets of instructions) that would print all the numbers from 1 to 255.\nPrint odd numbers between 1-255\nWrite a program (sets of instructions) that would print all the odd numbers from 1 to 255.\nPrint Sum\nWrite a program that would print the numbers from 0 to 255 but this time, it would also print the sum of the numbers that have been printed so far. For example, your output should be something like this:\nNew number: 0 Sum: 0\nNew number: 1 Sum: 1\nNew Number: 2 Sum: 3\nNew number: 3 Sum: 6\nNew Number: 255 Sum: ___.\nDo NOT use an array to do this exercise.\nIterating through an Array\nGiven an array X, say [1,3,5,7,9,13], write a program that would iterate through each member of the array and print each value on the screen. Being able to loop through each member of the array is extremely important.\nFind Max\nWrite a program (sets of instructions) that takes any array and prints the maximum value in the array. Your program should also work with a given array that has all negative numbers (e.g. [-3, -5, -7]), or even a mix of positive numbers, negative numbers and zero.\nGet Average\nWrite a program that takes an array, and prints the AVERAGE of the values in the array. For example for an array [2, 10, 3], your program should print an average of 5. Again, make sure you come up with a simple base case and write instructions to solve that base case first, then test your instructions for other complicated cases. You can use a count function with this assignment.\nArray with Odd Numbers\nWrite a program that creates an array \'y\' that contains all the odd numbers between 1 to 255. When the program is done, \'y\' should have the value of [1, 3, 5, 7, ... 255].\nGreater than Y\nWrite a program that takes an array and returns the number of values in that array whose value is greater than a given value y. For example, if array = [1, 3, 5, 7] and y = 3, after your program is run it will print 2 (since there are two values in the array that are greater than 3).\nSquare the Values\nGiven any array x, say [1, 5, 10, -2], create an algorithm (sets of instructions) that multiplies each value in the array by itself. When the program is done, the array x should have values that have been squared, say [1, 25, 100, 4].\nEliminate Negative Numbers\nGiven any array x, say [1, 5, 10, -2], create an algorithm that replaces any negative number with the value of 0. When the program is done, x should have no negative values, say [1, 5, 10, 0].\nMin, Max, and Average\nGiven any array x, say [1, 5, 10, -2], create an algorithm that prints the maximum number in the array, the minimum value in the array, and the average of the values in the array.\nShifting the values in an array\nGiven any array x, say [1, 5, 10, 7, -2], create an algorithm that shifts each number by one to the front and adds \'0\' to the end. For example, when the program is done,  if the array [1, 5, 10, 7, -2] is passed to the function, it should become [5, 10, 7, -2, 0].\nNumber to String\nWrite a program that takes an array of numbers and replaces any negative number with the string \'Dojo\'. For example, if array x is initially [-1, -3, 2] after your program is done that array should be [\'Dojo\', \'Dojo\', 2].\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28455',1),(50,'Puzzlesexample25',14,0,'Puzzles\n• Mandatory\n• Deadline: Monday of Week 1\n• Estimated Time: 1-2 hrs\nThe following problems are just continuing practice on all the things we have learned so far.\nRandom Array\nCreate a function called RandomArray() that returns an integer array\n • Place 10 random integer values between 5-25 into the array\n • Print the min and max values of the array\n • Print the sum of all the values\nCoin Flip\nCreate a function called TossCoin() that returns a string\n • Have the function print \"Tossing a Coin!\"\n • Randomize a coin toss with the result signaling either side of the coin\n • Have the function print either \"Heads\" or \"Tails\"\n • Finally, return the result\nCreate another function called TossMultipleCoins(int num) that returns a Double\n • Have the function call the tossCoin function multiple times based on num value\n • Have the function return a Double that reflects the ratio of head toss to total toss\nNames\nBuild a function Names that returns an array of strings\n • Create an array with the values: Todd, Tiffany, Charlie, Geneva, Sydney\n • Shuffle the array and print the values in the new order\n • Return an array that only includes names longer than 5 characters\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28456> \n\n',1),(51,'OOP with C#example26',15,0,'Object Oriented Programming (OOP) is a very important paradigm of the C# language and is extensively used in the ASP.NET Core framework so it is a critical skill for us to learn. The main focal point of OOP in C# is class creation. Classes define what objects we can build, how we can interact with them, and how they themselves interact with our program. A simple way to look at classes is: as a blueprint of functions and attributes that we want an instance of this class, AKA an Object, to hold. It may be easier to see as we begin working with them so let\'s jump right into basic creation.\npublic class Vehicle\n{\n    int numPassengers = 2;\n}\nThis is all it takes to define a class. In order to create an object of a class, though, we must invoke our class as a new object reference. Take special note where we put each piece of this code in our Program.cs file!\nusing System;\nnamespace ConsoleApplication\n{\n    //Make sure to include the Vehicle class separate from the Program class\n    public class Vehicle\n    {\n         //Accessibility of variables is defaulted to private\n         //so we must add the public keyword to anything we\n         //want to allow outside access to.\n         public int numPassengers = 2;\n    }\npublic class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Notice the type for the new object reference\n            // is the same as the class. name\n            Vehicle myVehicle = new Vehicle();\n            Console.WriteLine($\"My vehicle can hold {myVehicle.numPassengers} people\");\n        }\n    }\n}\nWith this in our Main function, we have declared the variable of myVehicle to be an instance or object of the class Vehicle. We also added an attribute of numPassengers to the class, that becomes part of the object variable when it is created. If we wanted to pass as variable to this object when creating it to change some of its attributes, such as the numPassengers variable, we need to include a function inside the class called a constructor. A constructor is called the moment an object is created using the new keyword and just requires adding a function with the same name as the Class.\nusing System;\nnamespace ConsoleApplication\n{\n    public class Vehicle\n    {\n         public int numPassengers;\n//Notice the Constructor function doesn\'t need\n         //a return type or the static keyword\n         public Vehicle(int val)\n         {\n              numPassengers = val;\n         }\n    }\npublic class Program\n    {\n        public static void Main(string[] args)\n        {\n            //Adding a value to the creation passes it to the constructor\n            Vehicle myVehicle = new Vehicle(7);\nConsole.WriteLine($\"My vehicle can hold {myVehicle.numPassengers} people\");\n        }\n    }\nObject Oriented Programming (OOP) is a very important paradigm of the C# language and is extensively used in the ASP.NET Core framework so it is a critical skill for us to learn. The main focal point of OOP in C# is class creation. Classes define what objects we can build, how we can interact with them, and how they themselves interact with our program. A simple way to look at classes is: as a blueprint of functions and attributes that we want an instance of this class, AKA an Object, to hold. It may be easier to see as we begin working with them so let\'s jump right into basic creation.\npublic class Vehicle\n{\n    int numPassengers = 2;\n}\nThis is all it takes to define a class. In order to create an object of a class, though, we must invoke our class as a new object reference. Take special note where we put each piece of this code in our Program.cs file!\nusing System;\nnamespace ConsoleApplication\n{\n    //Make sure to include the Vehicle class separate from the Program class\n    public class Vehicle\n    {\n         //Accessibility of variables is defaulted to private\n         //so we must add the public keyword to anything we\n         //want to allow outside access to.\n         public int numPassengers = 2;\n    }\npublic class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Notice the type for the new object reference\n            // is the same as the class. name\n            Vehicle myVehicle = new Vehicle();\n            Console.WriteLine($\"My vehicle can hold {myVehicle.numPassengers} people\");\n        }\n    }\n}\nWith this in our Main function, we have declared the variable of myVehicle to be an instance or object of the class Vehicle. We also added an attribute of numPassengers to the class, that becomes part of the object variable when it is created. If we wanted to pass as variable to this object when creating it to change some of its attributes, such as the numPassengers variable, we need to include a function inside the class called a constructor. A constructor is called the moment an object is created using the new keyword and just requires adding a function with the same name as the Class.\nusing System;\nnamespace ConsoleApplication\n{\n    public class Vehicle\n    {\n         public int numPassengers;\n//Notice the Constructor function doesn\'t need\n         //a return type or the static keyword\n         public Vehicle(int val)\n         {\n              numPassengers = val;\n         }\n    }\npublic class Program\n    {\n        public static void Main(string[] args)\n        {\n            //Adding a value to the creation passes it to the constructor\n            Vehicle myVehicle = new Vehicle(7);\nConsole.WriteLine($\"My vehicle can hold {myVehicle.numPassengers} people\");\n        }\n    }\n',1),(52,'Class Methodsexample27',15,0,'Class Methods\nWe have learned at this point that you can write functions that can be called without instantiating an object by using the static keyword, but what if we actually want to make a function a part of an object and why might we want this? First off, in order to do this, all we need to do is not include the static keyword! Easy enough, but it still begs the question of why? Once we make a function attached to an instantiated object, which we henceforth will refer to as A method, that method now directly correlates to that particular object and leaves other objects of the same class alone. Let\'s try this out on our Vehicle class and see if it becomes a little clearer.\npublic class Vehicle\n{\n     public int numPassengers;\n     public double distance = 0.0;\npublic Vehicle(int val)\n     {\n          numPassengers = val;\n     }\npublic void Move(double miles)\n     {\n        distance += miles;\n     }\n}\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        //We create two separate objects of class-Vehicle\n        Vehicle car = new Vehicle(5);\n        Vehicle bike = new Vehicle(1);\n//Notice they both have the same starting distance travelled\n        Console.WriteLine(car.distance); //Prints 0\n        Console.WriteLine(bike.distance); //Also Prints 0\n//The Move method however only effects the distance of the object it is referencing!!\n        car.Move(70.8);\n        Console.WriteLine(car.distance); //Now is printing 70.8\n        Console.WriteLine(bike.distance); //Still prints 0\n    }\n}\nAlso, notice how with this method we included the void keyword as before to specify the return type of the function. If we wanted to return a value from a method we can easily do that just as before when we were creating static functions.\npublic int Move(double miles)\n{\n    distance += miles;\n    return (int)distance;\n}\n',1),(53,'Method Overloadingexample28',15,0,'So one of the awesome features that are provided by C# that doesn\'t exactly exist in some of the other languages is the ability for Method/Function parameter overloading. This is the process of building methods with the same name and based on the parameters of the different functions and the data passed to it, the system can figure out which version to run. This ends up being a super useful and critical skill in ASP.NET Core development so let\'s pay particular attention to this.\npublic class Vehicle\n{\n    public int numPassengers;\n    public double distance = 0.0;\n//Constructors can be overloaded \n    //The first maybe being for a new vehicle\n    public Vehicle(int val)\n    {\n        numPassengers = val;\n    }\n//The second for preowned with milage already\n    public Vehicle(int val, double odo)\n    {\n        numPassengers = val;\n        distance = odo;\n    }\n//Method can also be overloaded for handling different parameters\n    public int Move(double miles)\n    {\n        distance += miles;\n        return (int)distance;\n    }\n//If a boolean is included in this version of the method call\n    //it may be measuring in km rather than miles.\n    public int Move(double miles, bool km)\n    {\n        //Convert the KM measurement to miles\n        if (km == true)\n        {\n            miles = miles * 0.62;\n        }\n        distance += miles;\n        return (int)distance;\n    }\n}\nWe can even improve on this last segment of code by reusing some of the code we already have and apply DRY principles by making the overloaded version of the Move function call the first version!\npublic int Move(double miles)\n{\n    distance += miles;\n    return (int)distance;\n} \npublic int Move(double miles, bool km)\n{\n    // Convert the KM measurement to miles\n    if (km == true)\n    {\n        miles = miles * 0.62;\n    }\n    return Move(miles);\n',1),(54,'Getter and Setterexample29',15,0,'Commonly in C#.NET programs and even more frequently in the ASP.NET stack, we may find the need to process data before saving it to a variable space and as such need to implement a few lines of code. We could add this code to your constructor function, but very quickly this can lead to some convolution. Often, instead of this, we might see lines of code that look like the following...\nprivate _numPassengers = 5;\npublic int numPassengers {\n get { return _numPassengers }\n set { _numPassengers = value; }\n}\nWhat this is doing is using the .NET built-in property Getter and Setter Methods. They allow us to easily add code for access and updating of variable fields while also obscuring the methods of doing so from the rest of our code. If we just want to implement these functions as a future placeholder with no current additional lines they can even be shortened slightly.\npublic int numPassenger { get; set; }\nThis is the most typical usage as it standardizes implementation, and allows for the easy extension as needed.\n',1),(55,'Collections Practiceexample30',16,0,'Collections Practice\n• Mandatory\n• Deadline: Monday of Week 1\n• Difficulty Level: Basic\n• Estimated Time: 1-2 hrs\nWe have discussed how array, list, and dictionaries all can be used, but its about time we put some of this knowledge into action. The following things should just be created in a new .NET project and uploaded at the end.\nThree Basic Arrays\n • Create an empty array to hold integer values 0 through 9\n • Create an array of the names \"Tim\", \"Martin\", \"Nikki\", & \"Sara\"\n • Create an array with space 10 that alternates between true and false values, starting with true\nMultiplication Table\n • With the values 1-10, use code to generate a multiplication table like the one below.\n • ex.\n \n • Use a multidimensional array to store all values\nUser Info Dictionary\n • Create a Dictionary for storing Name, Favorite Sport, Num of Pets, and True/False for whether or not a user likes Ice Cream.\n • Create 4 different dictionaries holding information for the 4 people in the array you created earlier (Tim, Martin, Nikki, Sara).\n • Create a list of dictionaries and add each user dictionary to it.\nLoop through the list and print out each field of user info.',1),(56,'Assignment: Human',17,0,'Assignment: Human\n• Mandatory\n• Deadline: Tuesday of Week 1\n• Difficulty Level: Basic\n• Estimated Time: 1-2 hrs\nLet\'s get our feet wet with some OOP practice in C#! This first assignment shouldn\'t take us too much effort, but that\'s ok since at this point we should be feeling pretty comfortable working with Classes and Objects.\nBuild a new .NET Project for this assignment as we will be revisiting in a later assignment.\n •  \nCreate a base Human class with five attributes: name, strength, intelligence, dexterity, and health.\n •  \nGive a default value of 3 for strength, intelligence, and dexterity. Health should have a default of 100.\n •  \nWhen an object is constructed from this class it should have the ability to pass a name\n •  \nLet\'s create an additional constructor that accepts 5 parameters, so we can set custom values for every field.\n •  \nNow add a new method called attack, which when invoked, should attack another Human object that is passed as a parameter. The damage done should be 5 x strength.\n •  \n(Optional) Change the last function to accept any object and just make sure it is of type Human before applying damage. Hint you may need to refer back to the Boxing/Unboxing tab!\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\n',1),(57,'Deck of Cards',18,0,'Deck of Cards\n• Mandatory\n• Deadline: Tuesday of Week 1\n• Difficulty Level: Intermediate\n• Estimated Time: 2-4 hrs\nTo Do\nCreate a class called \"Card\"\n 1. Give the Card class a property \"value\" which will hold the value of the card (A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K). This value should be a String\n 2. Give the Card a property \"Suit\" which will hold the suit of the card (Clubs, Spades, Hearts, Diamonds)\n 3. Give the Card a property \"numerical_value\" which will hold the numerical value of the card 1-13 as integers\nNext, create a class called \"Deck\"\n 1. Give the Deck class a property called \"cards\" which is a list of Card objects\n 2. When initializing the deck make sure that it has the 52 unique cards in its \"cards\" property\n 3. Give the Deck a deal method that selects the \"top-most\" card, removes it, and returns it\n 4. Give the Deck a reset method that resets the cards property to the contain the original 52 cards\n 5. Give the Deck a shuffle method that randomly reorders the deck\'s cards\nFinally, create a class called \"Player\"\n 1. Give the Player class a name property\n 2. Give the Player a hand property of type [Card]\n 3. Give the Player a draw method of type (Deck) -> Card which draws a card from a deck, adds it to the player\'s hand, and returns it\n  ? Note how we are passing the Deck by reference here since it is a class. \n 4. Give the Player a discard method of type (Card) -> Bool which discards the Card specified and returns True if the Card existed and was successfully removed or False if the Card was not in the player\'s hand.\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 60 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28460> \n\n',1),(58,'Inheritanceexample30',16,0,'Inheritance\nWe have been building out our Vehicle class quite a bit in previous examples in the classes tab, let\'s now take it a step further and start specializing our different vehicles. By taking the generic code already in place and adding different details we can create things like a Bike, Car, or Boat from our Vehicle class, into their own separate classes, without repeating necessary code, by making these new classes inherit from Vehicle.\nOriginal Vehicle Class\npublic class Vehicle\n{\n    public int numPassengers;\n    public double distance = 0.0;\n//Constructors can be overloaded \n    //The first maybe being for a new vehicle\n    public Vehicle(int val)\n    {\n        numPassengers = val;\n    }\n//The second for preowned with milage already\n    public Vehicle(int val, double odo)\n    {\n        numPassengers = val;\n        distance = odo;\n    }\n//Method can also be overloaded for handling different parameters\n    public int Move(double miles)\n    {\n        distance += miles;\n        return (int)distance;\n    }\n//If a boolean is included in this version of the method call\n    //it may be measuring in km rather than miles.\n    public int Move(double miles, bool km)\n    {\n        //Convert the KM measurement to miles\n        if (km == true)\n        {\n            miles = miles * 0.62;\n        }\n        distance += miles;\n        return (int)distance;\n    }\n}\nNew Car Class\npublic class Car : Vehicle\n{\n    public int numberOfWheels = 4;\n    public string condition;\npublic Car() : base(5)\n    {\n        condition = \"New\";\n    }\npublic Car(double odo) : base(5, odo)\n    {\n        condition = \"Used\";\n    }\n}\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Car oldCar = new Car(167263);\n        Console.WriteLine($\"Car Condition: {oldCar.condition}\");\n        Console.WriteLine($\"Max occupancy: {oldCar.numPassengers}\");\n        oldCar.Move(6);\n        Console.WriteLine($\"Current Milage: {oldCar.distance} miles\");\nCar myCar = new Car();\n        //Remember there are different forms of string construction\n        //but they all accomplish the same goal so it is simply preference\n        Console.WriteLine($\"Car Condition: {myCar.condition}\");\n        Console.WriteLine(\"Max occupancy: {0}\", myCar.numPassengers);\n        myCar.Move(26.6);\n        Console.WriteLine(\"Current Milage: \" + myCar.distance + \" miles\");\n    }\n}\nThe base part of the new class constructor is done to pass the needed variables to the parent class\' constructor methods. Notice how in this we can add some addition code to do on construction that relates to our new class and also how, afterward, we still have access to all of our parent classes attributes and functionality.\nMethod Overriding\nIt\'s great that we can inherit functionality from our parent class as well as add new functionality, but what if we want to change the functionality of one of these parent methods? The process for this is simple actually! If we just add a method to our new class that has the same name and parameters as a parent\'s, the child class method will take priority.\npublic class Vehicle\n{\n    //All past code for the Car Vehicle\n    //should still be present\n    public void GetInfo()\n    {\n        Console.WriteLine(\"This is just a basic Vehicle!\");\n        Console.WriteLine($\"Currently has travelled {distance} miles\");\n    }\n}\npublic class Car : Vehicle\n{\n    //All past code for the Car Class\n    //should still be present\n    public new void GetInfo()\n    {\n        Console.WriteLine($\"Car Condition:{condition}\");\n        Console.WriteLine($\"Max occupancy: {numPassengers}\");\n        Console.WriteLine($\"Current Milage: {distance} miles\");\n    }\n}\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Vehicle obj1 = new Vehicle(5);\n        Car obj2 = new Car(5);\n        obj1.GetInfo();\n        obj2.GetInfo();\n    }\n}\nWait, but this again just solves one problem and creates another! We want to just add functionality to a method, not completely over-write everything it does! Well, we are in luck. With a simple additional line to what we have done above we can change the process of method overriding to not just replace all existing functionality, but extend this functionality.\npublic class Vehicle\n{\n    //All past code for the Car Vehicle\n    //should still be present\n    public void GetInfo()\n    {\n        Console.WriteLine($\"Max occupancy: {numPassengers}\");\n        Console.WriteLine($\"Current Milage: {distance} miles\");\n    }\n}\npublic class Car : Vehicle\n{\n    //All past code for the Car Class\n    //should still be present\n    public new void GetInfo()\n    {\n        //This line will call the parent\'s version of this method\n        //first then add any additional code to it!\n        base.GetInfo();\n        Console.WriteLine($\"Car Condition:{condition}\");\n    }\n}\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Vehicle obj1 = new Vehicle(5);\n        Car obj2 = new Car(5);\n        obj1.GetInfo();\n        obj2.GetInfo();\n    }\n}\nInheritance and Accessibility\nEarlier in the functions chapter, we talked about the difference between public and private and how public is visible to any code in the same program, but private is only visible by code within the same class. Well, these accessibility levels are more to that, particularly when talking about in regards to class inheritance. See, public methods are inherited as expected; however, private methods are not. If we want to have a method have the visibility of a private method, but still be inherited, we have to use the access modifier of protected in place of public.\n\nFrom <http://learn.codingdojo.com/m/25/4015/28452> \n\n',0),(59,'Method Overridingexample31',16,0,'Method Overriding\nIt\'s great that we can inherit functionality from our parent class as well as add new functionality, but what if we want to change the functionality of one of these parent methods? The process for this is simple actually! If we just add a method to our new class that has the same name and parameters as a parent\'s, the child class method will take priority.\npublic class Vehicle\n{\n    //All past code for the Car Vehicle\n    //should still be present\n    public void GetInfo()\n    {\n        Console.WriteLine(\"This is just a basic Vehicle!\");\n        Console.WriteLine($\"Currently has travelled {distance} miles\");\n    }\n}\npublic class Car : Vehicle\n{\n    //All past code for the Car Class\n    //should still be present\n    public new void GetInfo()\n    {\n        Console.WriteLine($\"Car Condition:{condition}\");\n        Console.WriteLine($\"Max occupancy: {numPassengers}\");\n        Console.WriteLine($\"Current Milage: {distance} miles\");\n    }\n}\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Vehicle obj1 = new Vehicle(5);\n        Car obj2 = new Car(5);\n        obj1.GetInfo();\n        obj2.GetInfo();\n    }\n}\nWait, but this again just solves one problem and creates another! We want to just add functionality to a method, not completely over-write everything it does! Well, we are in luck. With a simple additional line to what we have done above we can change the process of method overriding to not just replace all existing functionality, but extend this functionality.\npublic class Vehicle\n{\n    //All past code for the Car Vehicle\n    //should still be present\n    public void GetInfo()\n    {\n        Console.WriteLine($\"Max occupancy: {numPassengers}\");\n        Console.WriteLine($\"Current Milage: {distance} miles\");\n    }\n}\npublic class Car : Vehicle\n{\n    //All past code for the Car Class\n    //should still be present\n    public new void GetInfo()\n    {\n        //This line will call the parent\'s version of this method\n        //first then add any additional code to it!\n        base.GetInfo();\n        Console.WriteLine($\"Car Condition:{condition}\");\n    }\n}\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Vehicle obj1 = new Vehicle(5);\n        Car obj2 = new Car(5);\n        obj1.GetInfo();\n        obj2.GetInfo();\n    }\n}\n',0),(60,'Inheritance and Accessibility',16,0,'Earlier in the functions chapter, we talked about the difference between public and private and how public is visible to any code in the same program, but private is only visible by code within the same class. Well, these accessibility levels are more to that, particularly when talking about in regards to class inheritance. See, public methods are inherited as expected; however, private methods are not. If we want to have a method have the visibility of a private method, but still be inherited, we have to use the access modifier of protected in place of public.',0),(61,'Assignment: Wizard, Ninja, Samurai',20,0,'Assignment: Wizard, Ninja, Samurai\n• Mandatory\n• Deadline: Tuesday of Week 1\n• Difficulty Level: Basic\n• Estimated Time: 1-2 hrs\nWe are going to be revisiting our Human class and building out three new classes that all inherit from it\npublic class Human\n{\n    public string name;\n//The { get; set; } format creates accessor methods for the field specified\n    //This is done to allow flexibility\n    public int health { get; set; }\n//These properties are all private\n    int strength { get; set; }\n    int intelligence { get; set; }\n    int dexterity { get; set; }\npublic Human(string person)\n    {\n        name = person;\n        strength = 3;\n        intelligence = 3;\n        dexterity = 3;\n        health = 100;\n    }\npublic Human(string person, int str, int intel, int dex, int hp)\n    {\n        name = person;\n        strength = str;\n        intelligence = intel;\n        dexterity = dex;\n        health = hp;\n    }\npublic void attack(object obj)\n    {\n        Human enemy = obj as Human;\n        if(enemy == null)\n        {\n            Console.WriteLine(\"Failed Attack\");\n        }\n        else\n        {\n            enemy.health -= strength * 5;\n        }\n    }\n}\nCreate a class for a Ninja, a Wizard, and a Samurai\n •  \nWizard should have a default health of 50 and intelligence of 25\n •  \nWizard should have a method called heal, which when invoked, heals the Wizard by 10 * intelligence\n •  \nWizard should have a method called fireball, which when invoked, decreases the health of whichever object it attacked by 20->50\n •  \nNinja should have a default dexterity of 175\n •  \nNinja should have a steal method, which when invoked, attacks an object and increases the Ninjas health by 10\n •  \nNinja should have a get_away method, which when invoked, decreases its health by 15\n •  \nSamurai should have a default health of 200\n •  \nSamurai should have a method called death_blow, which when invoked should attack an object and decreases its health to 0 if it has less than 50 health\n •  \nSamurai should have a method called meditate, which when invoked, heals the Samurai back to full health\n •  \n(optional) Samurai should have a class method called how_many, which when invoked, displays how many Samurai\'s there are. Hint you may have to use the static keyword\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28459> \n\n',0),(62,'(Optional) Terminal RPG Encounter',21,0,'(Optional) Terminal RPG Encounter\n• Optional\n• Deadline: Wednesday of Week 1\n• Estimated Time: 4-8 hrs\nUsing what we learned in the last assignment we could easily continue building these out into an entire Game. All we need to make this a reality is some simple game logic such as turns and a winning condition, an Enemy class with a few monster classes that inherit from it, and the ability to receive terminal input.\nYou can easily get input from the console using the following line:\nstring InputLine = Console.ReadLine();\nThe console will prompt and wait for input which will then be saved to the variable InputLine as a string.\n •  \nCreate a basic encounter between a Ally party of a Ninja, Samurai, and Wizard vs two Zombies and a Spider\n •  \nCreate the Zombie and Spider class from the Enemy Class and build object for them and the heros\n •  \nZombies and the Spider attack random plays when it is their turn\n •  \nPlayers use the text input to determine which attack to use\n •  \nIf all enemies or all players healths are brought to 0hp then the encounter is over and you should announce the winner\n •  \nBuild a turn system! Modulus and an array may help a lot here\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28461> \n\n',0),(63,'Interfaces',22,0,'Interfaces\nIn C# there is no way to inherit from multiple sources. Sometimes, though, you might want to be able to make a class seem like it inherits from a different class so that it might be able to be passed in a similar manner. The way to do this is to implement an interface. An interface is constructed like a class but becomes the requirements of a class\' construction rather than something you create objects from. In an interface, you define some methods and variable fields. From there any class that implements an interface MUST have these methods and fields.\ninterface CanRun\n{\n    // Anything that implements the CanRun interface must \n    // implement a \'Run()\' method that returns an integer.\n    int Run();\n}\n// Therefore, this class must have a Run() function in it!\nclass Goat : CanRun\n{\n    public int Run()\n    {\n       Console.WriteLine(\"I\'m a goat, and you betcha I can run....\");\n       return 5;\n    }\n}\n// You can have inheritance as well as interfaces at the same time! \nclass Bird\n{\n    // Most birds don\'t run!!!\n}\n// An ostrich, however, is an bird AND it runs!\n// Note: always specify inheritance first, followed by interfaces (there may be multiple)\nclass Ostrich: Bird, CanRun\n{\n    public int Run()\n    {\n        Console.WriteLine(\"I\'m a running bird...crazy, right?\");\n        return -16;\n        // Why does an Ostrich return -16 for this function?\n        // Scientists Have been working on this very problem for years.  Let\'s move on. \n    }\n}\n// Both can now be treated as objects of type CanRun\nCanRun obj1 = new Ostrich();\nCanRun obj2 = new Goat();\nExtension Methods\n',0),(64,'Extension Methods',22,0,'Extension Methods\nIf you want to add functionality to a class, one way you can do this is to create a new class to inherit from it and add all needed code there. The problem ends up being that now your value type is of that new class and no longer the original one for any object you create. This can cause some problems so instead, you can make use of what are called extension methods to directly attach new methods to that class. Extension methods are wrapped in a new custom class with the static keyword and when the method you want is declared you must include a variable for the class you want to add the extension to in your parameters list proceeded by the keyword this. The Code below will make it more apparent how it\'s done.\n// Assume this is the class provided that we can not edit.\npublic class ShoppingCart\n{\n    public List<Product> Products { get; set; }\n}\n// This is the wrapper for our extension\n// Note the static keyword\npublic static class MyExtensionMethods\n{\n    // Note how the parameters for the new function is previous class\n    public static decimal TotalPrices(this ShoppingCart cartParam)\n    {\n         decimal total = 0;\n         foreach (Product prod in cartParam.Products)\n         {\n             total += prod.Price;\n         }\n         return total;\n    }\n}\nFrom here an extension method is in place and the class will have access to that function when called as normal. Note they do have to be in the same namespace, though not in necessarily in the same file!\n',0),(65,'Extension Methods and Interfaces',22,0,'Extension Methods and Interfaces\nYou can apply an extension method directly to an interface as well! What this does is allows you to add the extension method functionality to every class that implements the interface. Pretty cool right!?\npublic static class MyExtensionMethods\n{\n    // This still only effects the Shopping cart class\n    public static decimal TotalPrices(this ShoppingCart cartParam)\n    {\n         decimal total = 0;\n         foreach (Product prod in cartParam.Products)\n         {\n             total += prod.Price;\n         }\n         return total;\n    }\n// This method is added to everything that uses the CanRun interface though!\n    public static double MarathonDistance(this CanRun creature)\n    {\n        creature.Run();\n        Console.WriteLine(\"I\'m running a marathon now!\");\n        return 26.2;\n    } \n}\n',0),(66,'Delegates',22,0,'Delegates\nCallback is a concept that exists in many other languages. The idea is that you can pass a function as a parameter to another function so that the passed function may be called within the one it was passed to. This allows for you to create some order by which the functions run as well as improve passing data between them. To create a callback in C# you must use a delegate, which is a variable reference to some type of function. Delegates can be defined like this:\npublic delegate void Del(string message);\npublic static void DelegateMethod(string message)\n{\n    Console.WriteLine(message);\n}\n// Instantiate the delegate to reference the DelegateMethod function\nDel handler = DelegateMethod;\nNow that you have set up a reference to a function as a delegate you can easily pass it to another function as a callback by making a parameter of the delegate type.\npublic void MethodWithCallback(int param1, int param2, Del callback)\n{\n    callback(\"The number is: \" + (param1 + param2).ToString());\n}\n// Call this function by passing the params and actual delegate reference\nMethodWithCallback(1, 2, handler);\n',0),(67,'Clause',22,0,'Clause \n 1. from \n 2. where \n 3. select \n 4. group \n 5. into \n 6. orderby \n 7. join \n 8. let \n 9. in \n 10. on \n 11. equals \n 12. by \n 13. ascending \n 14. descending \nDescription \n 1. Specifies a data source and a range variable (similar to an iteration variable). \n 2. Filters source elements based on one or more Boolean expressions separated by logical AND and \n 3. OR operators ( && or Il ). \n 4. Specifies the type and shape that the elements in the returned sequence will have when the query is \n 5. executed. \n 6. Groups query results according to a specified key value. \n 7. Provides an identifier that can serve as a reference to the results of a join, group or select clause. \n 8. Sorts query results in ascending or descending order based on the default comparer for the element \n 9. type. \n 10. Joins two data sources based on an equality comparison between two specified matching criteria. \n 11. Introduces a range variable to store sub-expression results in a query expression. \n 12. Contextual keyword in a join clause. \n 13. Contextual keyword in a join clause. \n 14. Contextual keyword in a join clause. \n 15. Contextual keyword in a group clause. \n 16. Contextual keyword in an orderby clause. \n 17. Contextual keyword in an orderby clause. \n',0),(68,'Extension Method Description',22,0,'Using keywords in this SQL-y manner is typically what is referred to as \"query syntax\". Another way of performing the same query exists that instead of using keywords, uses a chain of methods and lambda functions called \"dot-notation syntax\". An example of this is as follows:\nvar foundProducts = products.OrderByDescending(e => e.Price).Select(e => new { e.Name, e.Price });\nThe first syntax is more readable, but the second one has more power and control over queries done since there are limits to the number of predefined keywords that exist, but methods can always be added via extension (as we learned earlier in the Advanced OOP section).\n\nExtension Method Description \n 1. All \n 2. Any \n 3. Contains \n 4. Count \n 5. First \n 6. Last \n 7. Min/Max \n 8. OrderBy \n 9. Reverse \n 10. Select \n 11. Sum \n 12. Take \n 13. ToArry/ToList \n 14. Where \ndefinition\n 1. Returns true if all the items in the collection match the arguments passed \n 2. Returns true if at least one of the items in the collection matches the \n 3. arguments \n 4. Returns true if the collection contains a specific item or value \n 5. Returns the number of items in the collection \n 6. Returns the first item from the collection \n 7. Returns the last item in the collection \n 8. Returns the smallest or largest value in the collection \n 9. Sorts the collection based on some value \n 10. Reverse the order of a returned collection \n 11. Returns the result of a specified query \n 12. Totals the values specified for the collection \n 13. Selects a specified number of elements from the start of the collection \n 14. Converts the data provided to some collection type \n 15. Filter items based on the statements arguments \n',0),(69,'Language Integrated Queries',22,0,'LINQ (pronounced \"link\") allows you to work with any dataset as if you were using SQL queries. It\'s a very valuable tool that exists in the .NET framework and make sorting, ordering, and searching of dataset very simple and familiar feeling. The results of a LINQ expression are usually new enumerable collections. Due to this, type inference using the var keyword is the typical implementation of variables assigned to LINQ expressions.\nProduct[] products = {\n     new Product { Name = \"Jeans\", Category = \"Clothing\", Price = 24.7 },\n     new Product { Name = \"Socks\", Category = \"Clothing\", Price = 8.12 },\n     new Product { Name = \"Scooter\", Category = \"Vehicle\", Price = 99.99 },\n     new Product { Name = \"Skateboard\", Category = \"Vehicle\", Price = 24.99 },\n};\nWith this dataset, we can sort all the items by price then get exclusively the Name and Price field using LINQ. We must make sure to include the LINQ namespace in our code and from there can implement a query using the LINQ keywords.\n//At the top of the code\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n//*****\n//Rest of program code\n//*****\nvar foundProducts = from match in products\n                    orderby match.Price descending\n                    select new { match.Name, match.Price };\nThis is all that is needed to complete this operation! We have created a variable foundProducts that can be iterated through and contains anonymous objects holding Name and Price that are sorted by Price. You can change the operations here in any way to meet the needs of the query and there are quite a few more keywords available to improve your querying power. Below is a list of some of these keywords and a description of what they do.\n',0),(70,'Async',24,0,'Async\nC# has the ability to perform asynchronous methods: one that happened concurrently in the background while other parts of the code continue to execute. Asynchronous methods are an important tool for removing bottlenecks from code and allowing the application to take advantage of multiple processors and processor cores. When we talk about \"in the background\" from here on out we are talking about on one of these separate processor cores.\nImplementing Async with C# is relatively easy and only requires using a few keywords to signify that a method is to be performed asynchronously. In the method, you need to include the async keyword and the point in which you make an async call should be prefixed with await. You also have the generic Task class that represents a box to handle the return data of the async call itself.\n//Here is an example of an asynchronous call to a webserver\n//that returns the length of the page content after the call comes back.\nusing System.Net.Http;\nusing System.Threading.Tasks;\npublic class MyAsyncMethods {\npublic async static Task<long?> GetPageLength() {\nHttpClient client = new HttpClient();\n     \n         var httpMessage = await client.GetAsync(\"http://apress.com\");\n//We can do things here while waiting\n         //for the HTTP request to complete\nreturn httpMessage.Content.Headers.ContentLength;\n     }\n}\n\nFrom <http://learn.codingdojo.com/m/25/4015/28450> \n\n',0),(71,'Simple CRUD with MySQL',26,0,'Simple CRUD with MySQL\n• Mandatory\n• Deadline: Wednesday of Week 1\n• Estimated Time: 2-4 hrs\nNow that we remember a little about creating a MySQL Database using MySQL Workbench we are going to put that knowledge to use with some C# code base. The first thing we need to do is to build out our model for this assignment!\n • Create a Database called \"consoleDB\"\n • Create a Users table that has the following columns\n  ? FirstName as VARCHAR(255)\n  ? LastName as VARCHAR(255)\n  ? FavoriteNumber as INT\n • Finally INSERT 3 rows of Dummy-Data\nOkay! So we have our Database set up and ready go. Now it\'s time to start building out a .NET console project to interact with it and do some CRUD operations. There are just two important bits of knowledge we must share before unleashing you on this assignment!\nReading Input From Console\nIn order to be able to add new information to the Database, we need to be able to accept some input from the user! Luckily, you can easily get input from the console using the following line:\nstring InputLine = Console.ReadLine();\nThe console will prompt and wait for input which will then be saved to the variable InputLine as a string. Using a collection of these variables, we will be able to gather all the information needed to send off to our Database.\nConnecting to & Querying the DB\nOk, so we can get all the information we need to create a new row from a user now we just need to send it off to the Database. Well, here\'s the catch (why is there always a catch!?) C#.NET Core by itself without any additional packages does not know how to make a database connection. Fear not, though, because we\'ll help you out and let you off easy on this. Below is code that we have put together to make easy queries to-from a MySQL database with minimal modification.\nDbConnection.cs\nusing System.Collections.Generic;\nusing System.Data.Common;\nusing MySql.Data.MySqlClient;\nnamespace DbConnection\n{\n    public class DbConnector\n    {\n        public static List<Dictionary<string, object>> ExecuteQuery(string queryString)\n        {\n            string server = \"localhost\";\n            string db = \"myDatabase\";\n            string port = \"8889\";\n            string user = \"root\";\n            string pass = \"root\";\n            using(var connection = new MySqlConnection(\n                $\"Server={server};Database={db};Port={port};UserID={user};Password={pass};\"))\n            {\n                connection.Open();\n                using(var command = new MySqlCommand(queryString, connection))\n                {\n                    var result = new List<Dictionary<string, object>>();\n                    using(DbDataReader rdr = command.ExecuteReader())\n                    {\n                        while(rdr.Read())\n                        {\n                            var dict = new Dictionary<string, object>();\n                            for( int i = 0; i < rdr.FieldCount; i++ ) {\n                                dict.Add(rdr.GetName(i), rdr.GetValue(i));\n                            }\n                            result.Add(dict);\n                        }\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}\nAll you may need to do is edit things like the Port variable and the password depending on which system you are on. Once we add this code to our project we need to make sure that we have the dependencies it requires as well! To do this is pretty simple. The dependencies list in the project.json file is a representation of the packages we are using. Anything added here after a dotnet restore command will then exist in our project. So we need to just add the MySQL package to our dependencies list!\n\nFrom there you are good to go to work with MySQL and C#.NET. Wait, it\'s that easy? Yep, because this new connection class is static when you want to make a query all you need to do is reference the ExecuteQuery and pass the query you created as a parameter the result will be returned back to you from there. Keep in mind though you need to either be in or import the ConsoleWithDb Namespace to have access to this code!! We can pull in code from any namespace, even one we write, with a using statement.\nusing DbConnection;\n//Other code\nDbConnector.ExecuteQuery(\"Some query string\");\n •  \nCreate the Database\n •  \nBuild a Read function that displays all current users information when the app start and after every insert\n •  \nBuild a Create function that accepts input the create a new User row\n •  \n(Optional) Build a Update function that when you specify a User Id will allow you to update all prompted rows\n •  \n(Optional) Build a Delete function that will remove a user with the ID specified\nPair Program\n( 30 minutes left )\n \nDiscussion\n( 30 minutes left )\n \nAsk Someone\n( 60 minutes left )\nFiles\n\n No file chosen \nUPLOAD\n\nFrom <http://learn.codingdojo.com/m/25/4015/28465> \n',0);
/*!40000 ALTER TABLE `projects` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `subject`
--

DROP TABLE IF EXISTS `subject`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `subject` (
  `Subjectid` int(11) NOT NULL,
  `SubjectName` varchar(45) DEFAULT NULL,
  `SubjectDesc` varchar(255) DEFAULT NULL,
  `Techid` int(11) NOT NULL,
  PRIMARY KEY (`Subjectid`),
  KEY `Techid_index` (`Techid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `subject`
--

LOCK TABLES `subject` WRITE;
/*!40000 ALTER TABLE `subject` DISABLE KEYS */;
INSERT INTO `subject` VALUES (1,'C# Fundamentals',NULL,1),(2,'NancyFx',NULL,1),(3,'Asp.net Core',NULL,1),(4,'Entity Framework',NULL,1),(5,'Fundamentals Deployment',NULL,1),(6,'Fundamentals Security and identity',NULL,1),(7,'Fundamentals Scalability',NULL,1),(8,'Addtional Material',NULL,1);
/*!40000 ALTER TABLE `subject` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tech`
--

DROP TABLE IF EXISTS `tech`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tech` (
  `Techid` int(11) NOT NULL,
  `TechName` varchar(12) DEFAULT NULL,
  `TechDesc` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Techid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tech`
--

LOCK TABLES `tech` WRITE;
/*!40000 ALTER TABLE `tech` DISABLE KEYS */;
INSERT INTO `tech` VALUES (1,'.net',NULL),(2,'Python',NULL),(3,'Lamp',NULL),(4,'Mean',NULL),(5,'azure',NULL);
/*!40000 ALTER TABLE `tech` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `topics`
--

DROP TABLE IF EXISTS `topics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `topics` (
  `Topicid` int(11) NOT NULL,
  `TopicName` varchar(45) DEFAULT NULL,
  `TopicDesc` varchar(255) DEFAULT NULL,
  `Subjectid` int(11) NOT NULL,
  `Techid` int(11) NOT NULL,
  PRIMARY KEY (`Topicid`),
  KEY `Subjectid_index` (`Subjectid`),
  KEY `Techid_index` (`Techid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `topics`
--

LOCK TABLES `topics` WRITE;
/*!40000 ALTER TABLE `topics` DISABLE KEYS */;
INSERT INTO `topics` VALUES (1,'What sets C# apart?',NULL,1,1),(2,'Variables and Output',NULL,1,1),(3,'Conditionals',NULL,1,1),(4,'Loops',NULL,1,1),(5,'Fundamentals I',NULL,1,1),(6,'VS Code Debugger',NULL,1,1),(7,'Arrays',NULL,1,1),(8,'Lists',NULL,1,1),(9,'Dictionaries',NULL,1,1),(10,'Collections Practice',NULL,1,1),(11,'(Optional) Boxing/Unboxing',NULL,1,1),(12,'Functions',NULL,1,1),(13,'Basic 13',NULL,1,1),(14,'Puzzles',NULL,1,1),(15,'Classes',NULL,1,1),(16,'Inheritance',NULL,1,1),(17,'Deck of Cards',NULL,1,1),(18,'Inheritance',NULL,1,1),(19,'Human',NULL,1,1),(20,'Wizard, Ninja, Samurai',NULL,1,1),(21,'(Optional) Terminal RPG Encounter',NULL,1,1),(22,'OOP Adv',NULL,1,1),(23,'LINQ',NULL,1,1),(24,'Async',NULL,1,1),(25,'SQL Database Review',NULL,1,1),(26,'Simple CRUD with MySQL',NULL,1,1),(27,'Intro to NancyFx',NULL,2,1),(28,'Getting Started',NULL,2,1),(29,'Watcher Tool',NULL,2,1),(30,'Hello Nancy',NULL,2,1),(31,'Nancy Routing',NULL,2,1),(32,'Serving Static Pages',NULL,2,1),(33,'Displaying Errors',NULL,2,1),(34,'Super Simple View Engine',NULL,2,1),(35,'Session',NULL,2,1),(36,'Great Number Game',NULL,2,1),(37,'Ninja Gold',NULL,2,1),(38,'Simple Deployment (Azure) Part I',NULL,2,1),(39,'Simple Deployment (Azure) Part II',NULL,2,1),(40,'Backend API Calls',NULL,2,1),(41,'PokeInfo',NULL,2,1),(42,'Nancy to SQL',NULL,2,1),(43,'Quoting Dojo Redux',NULL,2,1),(44,'Encryption',NULL,2,1),(45,'Login and Registration',NULL,2,1),(46,'Configuring ASP.NET Core Mvc',NULL,3,1),(47,'Controllers',NULL,3,1),(48,'Routing',NULL,3,1),(49,'Serving View FIles',NULL,3,1),(50,'Communicating with the Front End',NULL,3,1),(51,'Razor View Engine',NULL,3,1),(52,'Time Display',NULL,3,1),(53,'Dojo Survey',NULL,3,1),(54,'Redirecting',NULL,3,1),(55,'Session and TempData',NULL,3,1),(56,'Candyman',NULL,3,1),(57,'Generated Files',NULL,3,1),(58,'Random Passcode',NULL,3,1),(59,'Dojodachi',NULL,3,1),(60,'Deploy to Azure',NULL,3,1),(61,'Models and Validation',NULL,3,1),(62,'Validating Forms',NULL,3,1),(63,'Database connection',NULL,3,1),(64,'Quoting Dojo',NULL,3,1),(65,'Configuration',NULL,3,1),(66,'Encryption',NULL,3,1),(67,'Login and Registration',NULL,3,1),(68,'Dapper Relationships',NULL,3,1),(69,'Deploying with a Database',NULL,3,1),(70,'Quoting Dojo Redux',NULL,3,1),(71,'Tag Helpers',NULL,3,1),(72,'Partials',NULL,3,1),(73,'The Wall',NULL,3,1),(74,'Ajax w/ ASP.NET MVC',NULL,3,1),(75,'Ajax Notes',NULL,3,1),(76,'Microsoft Cognitive Services (',NULL,3,1),(77,'Intro to ORM',NULL,4,1),(78,'Entity Framework Core',NULL,4,1),(79,'Entity Framework Core on Console',NULL,4,1),(80,'Querying with EF Core',NULL,4,1),(81,'Console CRUD App',NULL,4,1),(82,'Connecting EF Core with MVC to Database',NULL,4,1),(83,'ViewModels',NULL,4,1),(84,'Quoting Dojo Re-Redux',NULL,4,1),(85,'Relationships in EF Core',NULL,4,1),(86,'E-commerce',NULL,4,1),(87,'Deployment with EF',NULL,4,1),(88,'User Dashboard',NULL,4,1),(89,'Using Environments',NULL,5,1),(90,'Amazon EC2',NULL,5,1),(91,'SSH (MacOS/Linux)',NULL,5,1),(92,'SSH (Windows)',NULL,5,1),(93,'ASP.NET on EC2',NULL,5,1),(94,'Custom Error Pages',NULL,5,1),(95,'Security and identity',NULL,6,1),(96,'Identity Intro',NULL,6,1),(97,'Enabling Identity',NULL,6,1),(98,'Postgres & EF Migrations',NULL,6,1),(99,'Keeping Track of Users with Identity',NULL,6,1),(100,'Login and Registration',NULL,6,1),(101,'User Secrets and External Authentication',NULL,6,1),(102,'Authorization',NULL,6,1),(103,'Roles',NULL,6,1),(104,'In-Memory Caching',NULL,7,1),(105,'Distributed Caching',NULL,7,1),(106,'Azure Load Testin',NULL,7,1),(107,'Knockout.js',NULL,8,1),(108,'Custom Error Pages',NULL,8,1),(109,'(Optional) EF to other Database',NULL,8,1),(110,'Amazon',NULL,8,1),(111,'SSH (MacOS/Linux)',NULL,8,1),(112,'SSH (Windows)',NULL,8,1),(113,'ASP.NET on EC2',NULL,8,1);
/*!40000 ALTER TABLE `topics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `Userid` int(11) NOT NULL,
  `UserName` varchar(12) DEFAULT NULL,
  `UserEmail` varchar(25) DEFAULT NULL,
  `UserAge` int(11) NOT NULL,
  `UserGoals` varchar(25) DEFAULT NULL,
  `UserDreams` varchar(45) DEFAULT NULL,
  `UserPoints` int(11) NOT NULL,
  `UserBagdes` int(11) NOT NULL,
  PRIMARY KEY (`Userid`),
  KEY `UserAge_index` (`UserAge`),
  KEY `UserPoints_index` (`UserPoints`),
  KEY `UserBagdes_index` (`UserBagdes`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Russell','Powers45me@aol.com',30,'master .net','become a Solutions Archetect',0,0),(2,'Adam','SeattlePowers@gmail.com',29,'Create Story Applications','Adobe Engeener',0,0),(3,'Andrew','Keytechlabs@gmail.com',29,'BlackArmor','HoloLens Developer',0,0);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'storycodedesign'
--
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-01-17  4:10:59
